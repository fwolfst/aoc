#!/usr/bin/env ruby

# Read from e.g. 2.input if no arg given, otherwise read example input from end of file.
input = ARGV.empty? ? DATA.readlines(chomp: true) : File.new(__FILE__ + '.input').readlines(chomp: true)

# The big bet when starting to implement the solution is:
#   Lets hope there will be just one path to 'location'
#   That bet was won, but the ranges are too big

class ToMap
  attr_accessor :to
  attr_accessor :maps

  def initialize(from_to)
    @to = from_to.split(/[- ]/)[-2]
    @maps = []
  end

  def hash()=@to.hash

  def [](key)
    maps.each do |(dest,source,len)|
      if (source..(source + len)) === key
        return dest + (key - source)
      end
    end
    return key
  end
end

seeds = input.first.scan(/\d+/).map &:to_i
sections = input[1..].chunk_while {_1 != ''}.to_a.reject {_1 == ['']}

maps = sections.map do |name, *maps|
  to_map = ToMap.new(name)
  maps.reject{_1==''}.each do |m|
    (dest, source, len) = m.scan(/\d+/).map &:to_i
    to_map.maps << [dest, source, len]
  end
  [
    name.split(?-).first,
    to_map
  ]
end.to_h

score = seeds.map do |seed|
  num = seed
  at = 'seed'
  while(at != 'location') do
    num = maps[at][num]
    at = maps[at].to
  end
  num
end.min


puts "#1:"
puts score

# .......................2.......................
# this is just a massacre

score = 0

more_seeds = seeds.each_slice(2).map do |start,num|
  (start...(start + num))
end

Map     = Data.define(:range, :mod)
Mapping = Data.define(:from, :to, :maps)

mappings = sections.map do |name, *maplines|
  maps = maplines.reject{_1==''}.map do |m|
    (dest, source, len) = m.scan(/\d+/).map &:to_i
    Map.new(range: (source...(source+len)), mod: dest - source)
  end.sort do |a,b|
    a.range.begin <=> b.range.begin
  end
  Mapping.new(
    from: name.split(?-).first,
    to: name.split(/[- ]/)[-2],
    maps:
  )
end
# [
#   Mapping from: seed to: soil
#     80..90   +10
#     100..120 -40
#   ...
# ]

# for exclusive integer (...) ranges!
def overlap? r1, r2
  r1.begin < (r2.end - 1) && (r1.end - 1) > r2.begin
end


# will return modified range first, up to two more afterwards
def chop_mod_range incoming, chopper
  return [(incoming.begin + chopper.mod)...(incoming.end + chopper.mod)] if chopper.range.cover?(incoming)
  raise "chop_mod_range broken" if chopper.range.begin > incoming.end
  raise "chop_mod_range broken" if chopper.range.end < incoming.begin

  if incoming.begin < chopper.range.begin
    if incoming.end > chopper.range.end
      [(chopper.range.begin + chopper.mod)...(chopper.range.end + chopper.mod),
       incoming.begin...chopper.range.begin,
       (chopper.range.end...incoming.end)]
    else
      [(incoming.begin + chopper.mod)...(chopper.range.begin + chopper.mod),
       chopper.range.begin...incoming.end]
    end
  else
    [(incoming.begin + chopper.mod)...(chopper.range.end + chopper.mod),
     chopper.range.end...incoming.end]
  end
end

at = 'seed'
work = more_seeds
while at != 'location' do
  current_map = mappings.find{_1.from == at}
  puts current_map
  next_work = []

  work.each do |range|
    chopper = current_map.maps.find {overlap?(_1.range, range)}
    if chopper
      if at == 'humidity'
        puts "chopchop #{range} -> #{chopper.range} => #{chop_mod_range(range,chopper)}"
      end
      modded_range, *others = chop_mod_range(range, chopper)
      work.push *others
      next_work << modded_range
    else
      next_work << range
    end
  end
  work = next_work
  at = current_map.to
end

score = work.map(&:begin).min

puts "#2:"
puts score

# Code nobody needs today
# def range_split r1, r2
#   # split in before, overlap, after
#   if r2.cover?(r1.begin)
#     before = r2.begin...r1.begin
#     if r1.end < r2.end
#       overlap = r1.dup
#       after   = r1.end...r2.end
#     else
#       overlap = r1.begin...r2.end
#       after   = r2.end...r2.end   # empty range
#     end
#   elsif r2.cover?(r1.end)
#     before  = r1.begin...r2.begin
#     overlap = r2.begin...r1.end
#     after   = r1.end...r2.end
#   elsif r1.cover?(r2)
#     before  = r1.begin...r2.begin
#     overlap = r2.dup
#     after   = r2.end...r1.end
#   elsif r1.end < r2.begin
#     before  = r1.dup
#     overlap = (0...0) # empty range
#     after   = r2.dup
#   elsif r2.end < r1.begin
#     before  = r2.dup
#     overlap = (0...0) # empty range
#     after   = r1.dup
#   else
#     raise "condition in range_split left out!"
#   end
#   [before, overlap, after]
# end

__END__
seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4
