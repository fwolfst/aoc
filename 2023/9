#!/usr/bin/env ruby

###########################################################
# Advent of Code    adventofcode.com 2023 day 9           #
#                   solutions from Felix Wolfsteller      #
###########################################################

# Read from e.g. 2.input if no arg given, otherwise read example input from end of file.

input = ARGV.empty? ? DATA.readlines(chomp: true) : File.new(__FILE__ + '.input').readlines(chomp: true)

###########################################################
#                         Part 1                          #
###########################################################
# Was looking for brute forcing, but looking at the input, I am not sure
# about feasability. Since I am still brainslimed-ill, lets try. No potencies here.
score = 0
input.map! {_1.split.map(&:to_i)}

def next_val(seq)
  diffs = seq.each_cons(2).map { _2 - _1 }
  if diffs.all? 0
    return seq.last
  else
    seq.last + next_val(diffs)
  end
end

score = input.map { next_val(_1) }.sum

puts "#1:"
puts score

###########################################################
#                         Part 2                          #
###########################################################

score = 0

def prev_val(seq)
  diffs = seq.each_cons(2).map { _2 - _1 }
  if diffs.all? 0
    return seq.first
  else
    seq.first - prev_val(diffs)
  end
end

score = input.map { prev_val(_1) }.sum

puts "#2:"
puts score

__END__
0 3 6 9 12 15
1 3 6 10 15 21
10 13 16 21 30 45
