#!/usr/bin/env ruby

# Read from e.g. 2.input if no arg given, otherwise read example input from end of file.

input = ARGV.empty? ? DATA.readlines(chomp: true) : File.new(__FILE__ + '.input').readlines(chomp: true)

numbers       = [] # [number, x, y]
part_numbers  = []
other_numbers = []

WIDTH = input.first.size
HEIGHT= input.size

x, y = 0, 0

while y < HEIGHT
  while x < WIDTH
    if input[y][x] =~ /\d/
      len = input[y][x..].scan(/\d+/).first.size
      numbers << [input[y][x...x+len], x, y]
      x += len
    end
    x += 1
  end
  x = 0
  y += 1
end

around_symbol = ->(n) do
  number, x, y = n
  len = number.length

  from_left = [x-1,0].max
  to_right  = [x+len, WIDTH-1].min
  from_top  = [y-1,0].max
  to_butt   = [y+1, HEIGHT-1].min

  (from_top..to_butt).to_a.each do |yidx|
    if input[yidx][from_left..to_right] =~ /[^.0-9]/
      return true
    end
  end
  return false
end

part_numbers = numbers.select &around_symbol

score = part_numbers.map(&:first).map(&:to_i).sum

puts "#1:"
puts score

score = 0

y = 0
x = 0
$gears = {}
while y < HEIGHT
  while x < WIDTH
    if input[y][x] == '*'
      $gears[[x,y]] = []
    end
    x += 1
  end
  x = 0
  y += 1
end


link_gear = ->(n) do
  number, x, y = n
  len = number.length

  from_left = [x-1,0].max
  to_right  = [x+len, WIDTH-1].min
  from_top  = [y-1,0].max
  to_butt   = [y+1, HEIGHT-1].min

  (from_top..to_butt).to_a.each do |yidx|
    (from_left..to_right).each do |xidx|
      if input[yidx][xidx] == '*'
        $gears[[xidx,yidx]] << number
      end
    end
  end
end
numbers.each &link_gear

$gears.each do |_loc, engines|
  if engines.count == 2
    score += engines.map(&:to_i).inject(&:*)
  end
end

puts "#2:"
puts score

__END__
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
