#!/usr/bin/env ruby

###########################################################
# Advent of Code    adventofcode.com                      #
#                   solutions from Felix Wolfsteller      #
###########################################################

# Read from e.g. 2.input if no arg given, otherwise read example input from end of file.

input = ARGV.empty? ? DATA.readlines(chomp: true) : File.new(__FILE__ + '.input').readlines(chomp: true)

###########################################################
#                         Part 1                          #
###########################################################

# split brain

s_loc = input.map.with_index do |line,y|
  x = line.index 'S'
  if x.nil? || y.nil?
    nil
  else
    [x,y]
  end
end.compact.flatten

NORTH = [ 0,-1]
EAST  = [ 1, 0]
SOUTH = [ 0, 1]
WEST  = [-1, 0]

OPEN_ENDS = {
  'S' => [NORTH, EAST, SOUTH, WEST],
  '|' => [NORTH, SOUTH],
  '-' => [WEST,  EAST],
  'L' => [NORTH, EAST],
  'J' => [NORTH, WEST],
  '7' => [SOUTH, WEST],
  'F' => [SOUTH, EAST],
  '.' => []
}
COUNTER_DIRECTION = {
  NORTH => SOUTH,
  EAST  => WEST,
  WEST  => EAST,
  SOUTH => NORTH
}

map = input.map do |line|
  line.chars.map {OPEN_ENDS[_1]}
end.transpose.to_a

def map.width()= @width ||= size()
def map.height()= @height ||= first.size()
def map.in?(x,y)
  ((0..width) === x) && ((0..height) === y)
end
def map.out?(...)= !in?(...)

# neighbours only
def map.connected?(x1,y1,x2,y2)
  if x1 != x2
    # horizontal
    if x1 < x2
      return self[x1][y1].include?(EAST) && self[x2][y2].include?(WEST)
    else
      return self[x1][y1].include?(WEST) && self[x2][y2].include?(EAST)
    end
  else
    # vertical
    if y1 < y2
      return self[x1][y1].include?(SOUTH) && self[x2][y2].include?(NORTH)
    else
      return self[x1][y1].include?(NORTH) && self[x2][y2].include?(SOUTH)
    end
  end
end

def map.connections(x, y, i_come_from=nil)
  all_outgoing = self[x][y].map { [x + _1[0], y + _1[1]] }.reject{out? *_1}
  all_outgoing.reject! {!connected?(x,y,*_1)}
  return all_outgoing if i_come_from.nil?
  all_outgoing.select { _1.any?(i_come_from) }
end

starts = map.connections(*s_loc)
num_steps = 1
path_one = { s_loc => 0, starts[0] => 1 }
path_two = { s_loc => 0, starts[1] => 1 }
curr_one = starts[0]
curr_two = starts[1]

while (path_one.keys & path_two.keys == [s_loc])
  num_steps += 1

  next_one = map.connections(*curr_one).reject{ path_one.key?(_1)}.first

  path_one[next_one] = num_steps
  curr_one = next_one


  next_two = map.connections(*curr_two).reject{ path_two.key?(_1) }.first

  path_two[next_two] = num_steps
  curr_two = next_two
end

score = num_steps

puts "#1:"
puts score

###########################################################
#                         Part 2                          #
###########################################################

# Remembering something like:
# draw lines to the outside, count crossing with path:
#   if even then we are in, otherwise out?
score = 0

require 'set'
path = Set.new(path_one.keys | path_two.keys)
p path

(0..(map.width() )).each do |x|
  (0..(map.height() )).each do |y|
    #puts "Raycasting #{x} | #{y}"
    next if path.include?([x,y])
    c_north = ((0...y).to_a.count { path.include?([x,_1]) })
    #next if c_north == 0 || c_north.even?
    c_south = (((y+1)...map.height).to_a.count { path.include?([x,_1]) })
    #next if c_south == 0 || c_south.even?
    c_east  = (((x+1)...map.width).to_a.count { path.include?([_1,y]) })
    #next if c_east == 0 || c_east.even?
    c_west  = ((0...x).to_a.count { path.include?([_1,y]) })
    #next if c_west == 0 || c_west.even?
    #score += 1
    #p [x,y] if ((0...x).count { path.include?([_1,y]) }.odd?)
    #c = (0..x).count { path.include?([_1,y]) }
    #p c if ((0...x).count { path.include?([_1,y]) }.odd?)
    if x >= 6 && x <= 8 && y >= 4 && y <= 7
      puts "#{[x,y].inspect} : #{input[y][x]}"
      puts "north #{c_north} south #{c_south} east #{c_east} west #{c_west}"
    end
    next if (c_north * c_south * c_east * c_west) == 0
    #score += 1 if [c_north + c_south]., c_east, c_west].all?(&:odd?)
    score += 1 if (c_north + c_south).even? && (c_east + c_west).even?
  end
end

puts "#2:"
puts score

###########################################################
#                         Example                         #
###########################################################
# 8 parts
#.F----7F7F7F7F-7....
#.|F--7||||||||FJ....
#.||.FJ||||||||L7....
#FJL7L7LJLJ||LJ.L-7..
#L--J.L7...LJS7F-7L7.
#....F-J..F7FJ|L7L7L7
#....L7.F7||L7|.L7L7|
#.....|FJLJ|FJ|F7|.LJ
#....FJL-7.||.||||...
#....L---J.LJ.LJLJ...

#10 parts
#FF7FSF7F7F7F7F7F---7
#L|LJ||||||||||||F--J
#FL-7LJLJ||||||LJL-77
#F--JF--7||LJLJ7F7FJ-
#L---JF-JLJ.||-FJLJJ7
#|F|F-JF---7F7-L7L|7|
#|FFJF7L7F-JF7|JL---7
#7-L-JL7||F7|L7F-7F7|
#L.L7LFJ|||||FJL7||LJ
#L7JLJL-JLJLJL--JLJ.L

__END__
.F----7F7F7F7F-7....
.|F--7||||||||FJ....
.||.FJ||||||||L7....
FJL7L7LJLJ||LJ.L-7..
L--J.L7...LJS7F-7L7.
....F-J..F7FJ|L7L7L7
....L7.F7||L7|.L7L7|
.....|FJLJ|FJ|F7|.LJ
....FJL-7.||.||||...
....L---J.LJ.LJLJ...
